import networkx as nx
from networkx.algorithms import smallworld
import csv
import matplotlib.pyplot as plt
import seaborn as sb
"""
# remove the nodes with in-degree = 0

file1 = open('indegree_torch.csv')
reader1 = csv.reader(file1)
next(reader1)
s = set()
for row in reader1:
	if row[1] == '1':
		s.add(row[0])
	else:
		continue
file2 = open('graph_torch.csv')
reader2 = csv.reader(file2)
next(reader2)

file3 = open('graph_torch_remove_leafnode.csv', 'w')
writer = csv.writer(file3)
for row in reader2:
	if (row[0] not in s) and (row[1] not in s):
		writer.writerow([row[0], row[1]])
	else:
		continue
file1.close()
file2.close()
file3.close()
"""
edges_tf = []
with open('graph_tensorflow_remove_leafnode.csv') as f:
    next(f)
    for line in f:
            start, end = line.strip('\n').split(',')
            edges_tf.append((start, end))
G_tf = nx.Graph()
G_tf.add_edges_from(edges_tf)
#print(G.number_of_nodes())
b_tf = nx.betweenness_centrality(G_tf, k=None, normalized=False, weight=None, endpoints=False, seed=None)
d_tf = nx.degree_centrality(G_tf)
res_tf = dict()
for k in b_tf.keys():
	res_tf[k] = [b_tf[k]]
for k in d_tf.keys():
	res_tf[k].append(d_tf[k]*(len(G_tf)-1))

plt.rcParams['figure.figsize'] = (12.0, 6.5)
ax = sb.regplot([i+1 for i in b_tf.values()], [i*(len(G_tf)-1) for i in d_tf.values()], color = "blue", fit_reg = False,
           x_jitter = 0.2, y_jitter = 0.2, scatter_kws = {'alpha' : 1/3, 's':100}, label = 'TensorFlow SC')
ax.set_yscale('log')
ax.set_xscale('log')
edges_torch = []
with open('graph_torch_remove_leafnode.csv') as f:
    next(f)
    for line in f:
            start, end = line.strip('\n').split(',')
            edges_torch.append((start, end))
G_torch = nx.Graph()
G_torch.add_edges_from(edges_torch)
#print(G.number_of_nodes())
b_torch = nx.betweenness_centrality(G_torch, k=None, normalized=False, weight=None, endpoints=False, seed=None)
d_torch = nx.degree_centrality(G_torch)
res_torch = dict()
for k in b_torch.keys():
	res_torch[k] = [b_torch[k]]
for k in d_torch.keys():
	res_torch[k].append(d_torch[k]*(len(G_torch)-1))
#plt.loglog([i+1 for i in b_torch.values()], [i*(len(G_torch)-1) for i in d_torch.values()], "o", markersize=4, color = "red", label = 'PyTorch')
ax = sb.regplot([i+1 for i in b_torch.values()], [i*(len(G_torch)-1) for i in d_torch.values()], color = "red", fit_reg = False,
           x_jitter = 0.2, y_jitter = 0.2, scatter_kws = {'alpha' : 1/3, 's':100}, label = 'PyTorch SC')
ax.set_yscale('log')
ax.set_xscale('log')
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.legend(fontsize = 20, loc = 'upper left')
plt.ylabel("Degree Centrality", fontsize = 18)
plt.xlabel("Betweenness Centrality + 1", fontsize = 18)
plt.show()
#print(res_tf)
#print(sorted(res_torch.items(), key=lambda x: x[1], reverse=True))
print(sorted(res_tf.items(), key=lambda x: x[1], reverse=True))
print(G_tf.number_of_nodes(), G_torch.number_of_nodes())
